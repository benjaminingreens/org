#!/usr/bin/env python3

import os
import subprocess
import sys

# Resolve the SUPER_ROOT dynamically as the root of the Git repository
def get_super_root():
    try:
        super_root = subprocess.check_output(['git', 'rev-parse', '--show-toplevel']).strip().decode('utf-8')
        return super_root
    except subprocess.CalledProcessError:
        print("Error: Not inside a Git repository.")
        sys.exit(1)

def main():
    super_root = get_super_root()
    config_file = os.path.join(super_root, '.config', 'orgrc.py')
    validation_script = os.path.join(super_root, 'scripts', 'validation.py')

    # Check if the .org directory exists in SUPER_ROOT
    org_dir = os.path.join(super_root, '.org')
    if not os.path.isdir(org_dir):
        print("No .org directory found in the repository. Skipping validation.")
        sys.exit(0)  # Allow the commit without running validation

    # Run the validation.py script
    try:
        result = subprocess.run(['python3', validation_script], check=True)
    except subprocess.CalledProcessError:
        print("Pre-commit hook failed. Aborting commit.")
        sys.exit(1)  # Fail the commit

    # Continue with the commit if the validation passed
    sys.exit(0)  # Allow the commit

if __name__ == '__main__':
    main()
